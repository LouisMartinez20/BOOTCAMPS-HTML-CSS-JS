# Ejercicio: Clase Vec (Eloquent JavaScript - Cap√≠tulo 6)

## üìñ Descripci√≥n

La clase `Vec` permite:

- Crear vectores con coordenadas `x` e `y`.
- Sumar y restar vectores (m√©todos `plus` y `minus`).
- Obtener la longitud (magnitud) de un vector mediante la propiedad `length`.

## ‚öôÔ∏è Explicaci√≥n

### Constructor

Recibe dos par√°metros (`x` e `y`) y los asigna como propiedades del vector.

### plus(other)

Recibe otro vector como par√°metro.
Devuelve un nuevo vector con las coordenadas sumadas.

### minus(other)

Recibe otro vector.
Devuelve un nuevo vector con las coordenadas restadas.

### get length

Calcula la magnitud del vector usando la f√≥rmula: `length = ‚àö(x¬≤ + y¬≤)`

# Ejercicio: Clase Group (Eloquent JavaScript - Cap√≠tulo 6)

Este c√≥digo implementa una clase `Group` que funciona como una colecci√≥n de valores √∫nicos, siguiendo el ejercicio del cap√≠tulo "Objetos" en el libro Eloquent JavaScript.

## üìñ Descripci√≥n

La clase `Group`:

- Guarda valores √∫nicos (sin duplicados).
- Permite a√±adir, eliminar y verificar si un valor est√° presente.
- Se puede crear a partir de cualquier objeto iterable (como arrays) con el m√©todo est√°tico `from`.

## ‚öôÔ∏è Explicaci√≥n

### Propiedad interna `_members`

- Es un arreglo que almacena los valores del grupo.
- El guion bajo (`_`) es una convenci√≥n para indicar que es privado (aunque en JavaScript no lo hace realmente privado).

### `add(value)` y el `!this.has(value)`

- `this.has(value)` devuelve `true` si el valor ya existe en el grupo.
- El signo de exclamaci√≥n (`!`) niega el resultado:
  - Si `has(value)` es `false` ‚Üí `!false` es `true` ‚Üí el valor se a√±ade.
  - Si `has(value)` es `true` ‚Üí `!true` es `false` ‚Üí el valor **no** se a√±ade.
- Esto es lo que evita duplicados en el grupo.

### `delete(value)` y el `!==`

- `.filter()` recorre cada elemento (`member`) y mantiene solo aquellos que cumplan la condici√≥n `member !== value`.
- `!==` significa "estrictamente diferente":
  - Compara valor y tipo de dato.
  - Ejemplo: `3 !== "3"` es `true` porque uno es n√∫mero y el otro string.
- No se usa `===` porque eso significar√≠a "mantener los que son estrictamente iguales", y nosotros queremos lo contrario: quitar el que es igual y quedarnos con todos los dem√°s.

### `has(value)`

- Devuelve `true` si el valor est√° en el grupo, `false` si no.
- Utiliza el m√©todo `includes` de los arrays.

### `static from(iterable)`

- **M√©todo est√°tico:** se llama en la clase, no en una instancia.
- Recibe cualquier objeto iterable (`array`, `string`, `set`, etc.).
- Usa `add()` para garantizar que no haya duplicados al crear el grupo.
  > **¬øQu√© significa "static"?**  
  > Un m√©todo est√°tico pertenece a la clase, no a las instancias creadas con ella. Se llama como `Group.from(...)`, no como `grupo.from(...)`.


## üìù Notas

- El operador `!` en `if (!this.has(value))` significa ‚Äúsi NO tiene el valor‚Äù.
- La convenci√≥n `_members` ayuda a identificar que es para uso interno, pero no es realmente privado en JavaScript cl√°sico.
- El operador `!==` en `.filter()` es importante para eliminar el valor correcto y evitar errores de tipo.

# Ejercicio: Clase Group iterable (Eloquent JavaScript - Cap√≠tulo 6)

Este c√≥digo ampl√≠a la clase `Group` para que sea **iterable**, es decir, que se pueda recorrer con bucles como `for...of`, tal como lo solicita el √∫ltimo ejercicio del cap√≠tulo "Objetos" en el libro Eloquent JavaScript.

## üìñ Descripci√≥n

La clase `Group`:

- Almacena valores √∫nicos (sin duplicados).
- Permite a√±adir, eliminar y verificar si un valor existe.
- Se puede crear a partir de cualquier iterable.
- **Ahora tambi√©n implementa el protocolo de iteraci√≥n de JavaScript** gracias a la implementaci√≥n de `[Symbol.iterator]`.

## üìù C√≥digo

## ‚öôÔ∏è Explicaci√≥n

### M√©todos de colecci√≥n (`add`, `delete`, `has`)

- Funcionan igual que en el ejercicio anterior, manteniendo la regla de no duplicados gracias a `!this.has(value)`.
- En el m√©todo `delete`, se usa `!==` para eliminar √∫nicamente el valor estrictamente igual y mantener todos los dem√°s.

### M√©todo especial `[Symbol.iterator]`

- Este m√©todo convierte la clase en **iterable**.
- Devuelve un **objeto iterador** que implementa el m√©todo `next()`:
  - `value` ‚Üí el elemento actual.
  - `done` ‚Üí indica si la iteraci√≥n ha terminado (`true`) o no (`false`).
- Usa `index` para ir recorriendo secuencialmente los elementos de `_members`.

#### ¬øPor qu√© `[Symbol.iterator]` y no otro nombre?

- `Symbol.iterator` es una **clave especial** que JavaScript busca autom√°ticamente cuando usas un bucle `for...of` o cuando intentas usar el operador de propagaci√≥n (`...`).
- Si no est√° implementado, la clase **no podr√° usarse de forma nativa** con estas construcciones.

### Uso en `for...of`

Como la clase ahora es iterable, se puede recorrer directamente:
